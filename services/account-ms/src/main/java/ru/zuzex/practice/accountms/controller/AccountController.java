package ru.zuzex.practice.accountms.controller;

import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import ru.zuzex.practice.accountms.dto.AccountDto;
import ru.zuzex.practice.accountms.dto.response.PageResponse;
import ru.zuzex.practice.accountms.mapper.AccountMapper;
import ru.zuzex.practice.accountms.model.Account;
import ru.zuzex.practice.accountms.service.AccountService;
import ru.zuzex.practice.accountms.validation.OnCreate;
import ru.zuzex.practice.accountms.validation.OnUpdate;

import java.net.URI;
import java.util.UUID;

@RestController
@RequestMapping("api/v1/account")
@RequiredArgsConstructor
public class AccountController {
    private final AccountService accountService;
    private final AccountMapper accountMapper;

    @GetMapping
    public ResponseEntity<PageResponse<AccountDto>> getAccounts(
            @RequestParam(value = "page", required = false, defaultValue = "1") Integer page,
            @RequestParam(value = "size", required = false, defaultValue = "5") Integer size
    ) {
        Page<Account> pageEntity = accountService.getAllAccounts(page, size);
        var accounts = pageEntity.getContent().stream().map(accountMapper::toDto).toList();

        PageResponse<AccountDto> response = PageResponse.<AccountDto>builder()
                .content(accounts)
                .totalPages(pageEntity.getTotalPages())
                .totalElements(pageEntity.getTotalElements())
                .curPage(page)
                .pageSize(size)
                .build();

        return ResponseEntity.ok()
                .body(response);
    }

    @GetMapping("/{accountId}")
    public ResponseEntity<AccountDto> getAccountById(@PathVariable("accountId") UUID accountId) {
        var account = accountService.getAccount(accountId);
        return ResponseEntity.ok()
                .body(accountMapper.toDto(account));
    }

    @PostMapping
    public ResponseEntity<AccountDto> createAccount(@RequestBody @Validated(OnCreate.class) AccountDto accountDto) {
        if (accountDto.getAccountId() != null)
            throw new IllegalArgumentException("Account ID must be generated by server. You don't have to specify it.");

        var account = accountMapper.toEntity(accountDto);
        account = accountService.create(account);

        return ResponseEntity
                .created(URI.create("/api/v1/account/" + account.getAccountId()))
                .body(accountMapper.toDto(account));
    }

    @PutMapping("/{accountId}")
    public ResponseEntity<AccountDto> updateAccount(
            @PathVariable(name = "accountId") UUID accountId, @RequestBody @Validated(OnUpdate.class) AccountDto accountDto) {
        var account = accountMapper.toEntity(accountDto);
        account = accountService.update(accountId, account);

        return ResponseEntity.ok()
                .body(accountMapper.toDto(account));
    }

    @DeleteMapping("/{accountId}")
    public ResponseEntity<HttpStatus> deleteAccount(@PathVariable UUID accountId) {
        accountService.delete(accountId);
        return ResponseEntity.ok().build();
    }
}
