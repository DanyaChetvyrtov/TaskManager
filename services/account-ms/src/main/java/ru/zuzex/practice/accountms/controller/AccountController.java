package ru.zuzex.practice.accountms.controller;

import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import ru.zuzex.practice.accountms.dto.AccountDto;
import ru.zuzex.practice.accountms.mapper.AccountMapper;
import ru.zuzex.practice.accountms.serviece.AccountService;
import ru.zuzex.practice.accountms.validation.OnCreate;
import ru.zuzex.practice.accountms.validation.OnUpdate;

import java.util.List;

@RestController
@RequestMapping("api/v1/account")
@RequiredArgsConstructor
public class AccountController {
    private final AccountService accountService;
    private final AccountMapper accountMapper;

    @GetMapping
    public ResponseEntity<List<AccountDto>> getAccounts() {
        var accounts = accountService.getAllAccounts()
                .stream().map(accountMapper::toDto).toList();

        return ResponseEntity
                .status(HttpStatus.OK)
                .body(accounts);
    }

    @GetMapping("/{accountId}")
    public ResponseEntity<AccountDto> getAccountById(@PathVariable("accountId") String accountId) {
        var account = accountService.getAccount(accountId);
        return ResponseEntity
                .status(HttpStatus.OK)
                .body(accountMapper.toDto(account));
    }

    @PostMapping
    public ResponseEntity<AccountDto> createAccount(@RequestBody @Validated(OnCreate.class) AccountDto accountDto) {
        if (accountDto.getAccountId() != null)
            throw new IllegalArgumentException("Account ID must be generated by server. You don't have to specify it.");

        var account = accountMapper.toEntity(accountDto);
        account = accountService.create(account);

        return ResponseEntity
                .status(HttpStatus.CREATED)
                .body(accountMapper.toDto(account));
    }

    @PutMapping("/{accountId}")
    public ResponseEntity<AccountDto> updateAccount(
            @PathVariable String accountId, @RequestBody @Validated(OnUpdate.class) AccountDto accountDto) {
        var account = accountMapper.toEntity(accountDto);
        account = accountService.update(accountId, account);

        return ResponseEntity
                .status(HttpStatus.OK)
                .body(accountMapper.toDto(account));
    }

    @DeleteMapping("/{accountId}")
    public ResponseEntity<HttpStatus> deleteAccount(@PathVariable String accountId) {
        accountService.delete(accountId);
        return ResponseEntity.ok().build();
    }
}
