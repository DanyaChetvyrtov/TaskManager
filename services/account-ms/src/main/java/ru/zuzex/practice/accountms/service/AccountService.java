package ru.zuzex.practice.accountms.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import lombok.RequiredArgsConstructor;
import lombok.SneakyThrows;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import ru.zuzex.practice.accountms.dto.kafka.AccountMessage;
import ru.zuzex.practice.accountms.exception.exception.AccountNotFoundException;
import ru.zuzex.practice.accountms.exception.exception.PageNotFound;
import ru.zuzex.practice.accountms.model.Account;
import ru.zuzex.practice.accountms.repository.AccountRepository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

@Service
@RequiredArgsConstructor
@Transactional(readOnly = true)
public class AccountService {
    private final AccountRepository accountRepository;
    private final AccountProducer accountProducer;
    private final ObjectMapper jacksonMapper;

    public Page<Account> getAllAccounts(Integer page, Integer size) {
        var pageEntity = accountRepository.findAll(PageRequest.of(page - 1, size));

        if (pageEntity.getTotalPages() < page) throw new PageNotFound("Such page does not exist");

        return pageEntity;
    }

    public List<Account> search(String keyword) {
        var accounts = accountRepository.searchAnywhereInNameOrSurname(keyword);

        if (accounts.isEmpty()) throw new AccountNotFoundException("No accounts were found by '" + keyword + "'");

        return accounts;
    }

    public Account getAccount(UUID accountId) {
        return accountRepository.findById(accountId).orElseThrow(AccountNotFoundException::new);
    }

    @Transactional
    public Account create(Account account) {
        if (account.getAccountId() != null)
            throw new IllegalArgumentException("Account ID must be generated by server. You don't have to specify it.");

        return accountRepository.save(account);
    }

    @Transactional
    public Account update(UUID accountId, Account account) {
        if (!accountId.equals(account.getAccountId()))
            throw new IllegalArgumentException("ID in path and body must match");

        var existedAccount = getAccount(accountId);

        existedAccount.setName(account.getName());
        existedAccount.setSurname(account.getSurname());
        existedAccount.setAge(account.getAge());

        return accountRepository.save(existedAccount);
    }

    @Transactional
    @SneakyThrows
    public void delete(UUID accountId) {
        var accountMessage = AccountMessage.builder()
                .id(UUID.randomUUID())
                .accountId(accountId)
                .eventType("DeleteAccount")
                .timestamp(LocalDateTime.now())
                .build();

        ObjectWriter ow = jacksonMapper.writer().withDefaultPrettyPrinter();
        String json = ow.writeValueAsString(accountMessage);

        accountProducer.sendMessage(json);
        accountRepository.deleteById(accountId);
    }
}
