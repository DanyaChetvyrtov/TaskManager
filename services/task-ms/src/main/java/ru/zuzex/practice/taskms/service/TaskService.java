package ru.zuzex.practice.taskms.service;

import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import ru.zuzex.practice.taskms.exception.exception.LocalProfileNotFoundException;
import ru.zuzex.practice.taskms.exception.exception.TaskAlreadyAssignedException;
import ru.zuzex.practice.taskms.exception.exception.TaskNotFoundException;
import ru.zuzex.practice.taskms.model.Task;
import ru.zuzex.practice.taskms.repository.LocalProfileRepository;
import ru.zuzex.practice.taskms.repository.TaskRepository;

import java.util.List;
import java.util.UUID;

@Service
@RequiredArgsConstructor
@Transactional(readOnly = true)
public class TaskService {
    private final TaskRepository taskRepository;
    private final LocalProfileRepository localProfileRepository;

    public List<Task> getAllByProfileId(UUID profileId) {
        var tasks = taskRepository.findAllByProfileId(profileId);

        if (tasks.isEmpty()) throw new TaskNotFoundException("No tasks found for profileId: " + profileId);

        return tasks;
    }

    public Task getTask(UUID taskId) {
        return taskRepository.findById(taskId).orElseThrow(TaskNotFoundException::new);
    }

    @Transactional
    public Task create(Task task) {
        if (task.getTaskId() != null)
            throw new IllegalArgumentException("Profile ID must be generated by server. You don't have to specify it.");

        return taskRepository.save(task);
    }

    @Transactional
    public Task update(UUID taskId, Task task) {
        if (!taskId.equals(task.getTaskId()))
            throw new IllegalArgumentException("ID in path and body must match");
        var existedTask = getTask(taskId);

        existedTask.setTitle(task.getTitle());
        existedTask.setBody(task.getBody());
        existedTask.setCompleted(task.isCompleted());

        return taskRepository.save(existedTask);
    }

    @Transactional
    public void delete(UUID taskId) {
        taskRepository.deleteById(taskId);
    }

    @Transactional
    public void reassign(UUID taskId, UUID newProfileId) {
        var task = getTask(taskId);
        var localProfile = localProfileRepository.findById(newProfileId).orElseThrow(LocalProfileNotFoundException::new);

        if(!localProfile.getIsActive())
            throw new LocalProfileNotFoundException();

        if(task.getProfileId().equals(newProfileId))
            throw new TaskAlreadyAssignedException("Current task already assigned to user with ID: " + newProfileId);

        task.setProfileId(newProfileId);
        taskRepository.save(task);
    }
}

