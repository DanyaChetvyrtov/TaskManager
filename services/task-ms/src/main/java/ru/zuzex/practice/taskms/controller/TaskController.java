package ru.zuzex.practice.taskms.controller;

import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import ru.zuzex.practice.taskms.dto.TaskDto;
import ru.zuzex.practice.taskms.mapper.TaskMapper;
import ru.zuzex.practice.taskms.service.TaskService;

import java.net.URI;
import java.util.List;
import java.util.UUID;

@RestController
@RequestMapping("api/v1/task")
@RequiredArgsConstructor
public class TaskController {
    private final TaskService taskService;
    private final TaskMapper taskMapper;


    @GetMapping
    public ResponseEntity<List<TaskDto>> getTasksByAccountId(@RequestParam(name = "accountId") UUID accountId) {
        var tasks = taskService.getAllByAccountId(accountId)
                .stream().map(taskMapper::toDto).toList();

        return ResponseEntity.ok()
                .body(tasks);
    }

    @GetMapping("/{taskId}")
    public ResponseEntity<TaskDto> getTaskById(@PathVariable(name = "taskId") UUID taskId) {
        var task = taskService.getTask(taskId);

        return ResponseEntity.ok()
                .body(taskMapper.toDto(task));
    }

    @PostMapping
    public ResponseEntity<TaskDto> createTask(@RequestBody TaskDto taskDto) {
        if (taskDto.getTaskId() != null)
            throw new IllegalArgumentException("Task ID must be generated by server. You don't have to specify it.");

        var task = taskMapper.toEntity(taskDto);
        task = taskService.create(task);

        return ResponseEntity
                .created(URI.create("/api/v1/task/" + task.getTaskId()))
                .body(taskMapper.toDto(task));
    }

    @PutMapping("/{taskId}")
    public ResponseEntity<TaskDto> updateTask(
            @PathVariable(name = "taskId") UUID taskId, @RequestBody TaskDto taskDto) {
        var task = taskMapper.toEntity(taskDto);
        task = taskService.update(taskId, task);

        return ResponseEntity.ok()
                .body(taskMapper.toDto(task));
    }

    @DeleteMapping("/{taskId}")
    public ResponseEntity<HttpStatus> deleteTask(@PathVariable UUID taskId) {
        taskService.delete(taskId);
        return ResponseEntity.ok().build();
    }
}
